{"version":3,"sources":["components/TextInput/TextInput.js","components/TextInput/index.js","components/Label/Label.js","components/Label/index.js","components/ProgressBar/ProgressBar.js","components/EyeIcon/EyeIcon.js","components/PasswordInput/PasswordInput.js","components/PasswordInput/index.js","../config/componentData.js","docs/examples/Label/ExampleOptional.js","docs/examples/Label/ExampleRequired.js","docs/examples/PasswordInput/ExampleAllFeatures.js","docs/examples/TextInput/ExampleError.js","docs/examples/TextInput/ExampleOptional.js","components/RegistrationForm/RegistrationForm.js","docs/examples/RegistrationForm/ExampleRegistrationForm.js","components/helloWorld/helloWorld.js","docs/examples/helloWorld/EampleHelloWorld.js","docs/examples sync /^/.//.*$","docs/Navigation.js","docs/CodeExample.js","docs/Example.js","docs/Props.js","docs/ComponentPage.js","docs/Docs.js","serviceWorker.js","index.js"],"names":["TextInput","_ref","htmlId","name","label","_ref$type","type","_ref$required","required","onChange","placeholder","value","error","children","props","Object","objectWithoutProperties","react_default","a","createElement","style","marginBottom","Label","htmlFor","assign","id","border","className","color","__webpack_require__","d","__webpack_exports__","TextInput_TextInput","display","Label_Label","ProgressBar","getColor","percent","_this","getWidthAsPercentOfTotalWidth","parseInt","width","_this$props","this","height","backgroundColor","React","Component","defaultProps","EyeIcon","xmlns","viewBox","transform","fill","cx","cy","r","PasswordInput","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","toggleShowPassword","event","setState","prevState","showPassword","preventDefault","state","maxLength","showVisibilityToggle","quality","href","onClick","marginLeft","EyeIcon_EyeIcon","length","components_ProgressBar_ProgressBar","components_PasswordInput_PasswordInput","module","exports","description","code","examples","defaultValue","computed","confirmationMessage","onSubmit","minPasswordLength","message","ExampleOptional","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","components_Label__WEBPACK_IMPORTED_MODULE_1__","ExampleRequired","ExampleAllFeatures","_Users_rishabhgupta_WebstormProjects_ps_react_rg_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","_Users_rishabhgupta_WebstormProjects_ps_react_rg_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_Users_rishabhgupta_WebstormProjects_ps_react_rg_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","password","_this2","react__WEBPACK_IMPORTED_MODULE_5___default","components_PasswordInput__WEBPACK_IMPORTED_MODULE_6__","target","minLength","getQuality","ExampleError","components_TextInput__WEBPACK_IMPORTED_MODULE_6__","RegistrationForm","user","validate","submitted","email","errors","concat","getOwnPropertyNames","_this$state","_this$state$user","passwordQuality","ExampleRegistrationForm","console","log","components_RegistrationForm_RegistrationForm","HelloWorld","ExampleHelloWorld","helloWorld","map","./Label/ExampleOptional","./Label/ExampleOptional.js","./Label/ExampleRequired","./Label/ExampleRequired.js","./PasswordInput/ExampleAllFeatures","./PasswordInput/ExampleAllFeatures.js","./RegistrationForm/ExampleRegistrationForm","./RegistrationForm/ExampleRegistrationForm.js","./TextInput/ExampleError","./TextInput/ExampleError.js","./TextInput/ExampleOptional","./TextInput/ExampleOptional.js","./helloWorld/EampleHelloWorld","./helloWorld/EampleHelloWorld.js","webpackContext","req","webpackContextResolve","o","e","Error","keys","resolve","Navigation","components","key","CodeExample","hljs","registerLanguage","javascript","highlightBlock","element","ref","Example","toggleCode","showCode","_this$props$example","example","ExampleComponent","require","componentName","default","docs_CodeExample","Props","ComponentPage","component","docs_Example","docs_Props","Docs","route","window","location","hash","substr","addEventListener","componentData","filter","docs_Navigation","docs_ComponentPage","Boolean","hostname","match","ReactDOM","render","Docs_Docs","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.503cab2e.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Label from '../Label';\n\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\nfunction TextInput({htmlId, name, label, type = \"text\", required = false, onChange, placeholder, value, error, children, ...props}) {\n    return (\n        <div style={{marginBottom: 16}}>\n            <Label htmlFor={htmlId} label={label} required={required} />\n            <input\n                id={htmlId}\n                type={type}\n                name={name}\n                placeholder={placeholder}\n                value={value}\n                onChange={onChange}\n                style={error && {border: 'solid 1px red'}}\n                {...props}/>\n            {children}\n            {error && <div className=\"error\" style={{color: 'red'}}>{error}</div>}\n        </div>\n    );\n};\n\nTextInput.propTypes = {\n    /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n    htmlId: PropTypes.string.isRequired,\n\n    /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\n    name: PropTypes.string.isRequired,\n\n    /** Input label */\n    label: PropTypes.string.isRequired,\n\n    /** Input type */\n    type: PropTypes.oneOf(['text', 'number', 'password']),\n\n    /** Mark label with asterisk if set to true */\n    required: PropTypes.bool,\n\n    /** Function to call onChange */\n    onChange: PropTypes.func.isRequired,\n\n    /** Placeholder to display when empty */\n    placeholder: PropTypes.string,\n\n    /** Value */\n    value: PropTypes.any,\n\n    /** String to display when error occurs */\n    error: PropTypes.string,\n\n    /** Child component to display next to the input */\n    children: PropTypes.node\n};\n\nexport default TextInput;\n","export { default } from './TextInput';\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n/** Label with required field display, htmlFor, and block styling */\nfunction Label({htmlFor, label, required}) {\n    return (\n        <label style={{display: 'block'}} htmlFor={htmlFor}>\n            {label} { required && <span style={{color: 'red'}}> *</span> }\n        </label>\n    )\n}\n\nLabel.propTypes = {\n    /** HTML ID for associated input */\n    htmlFor: PropTypes.string.isRequired,\n\n    /** Label text */\n    label: PropTypes.string.isRequired,\n\n    /** Display asterisk after label if true */\n    required: PropTypes.bool\n};\n\nexport default Label;\n","export { default } from './Label'\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass ProgressBar extends React.Component {\n    getColor = (percent) => {\n        if (this.props.percent === 100) return 'green';\n        return this.props.percent > 50 ? 'lightgreen' : 'red';\n    };\n\n    getWidthAsPercentOfTotalWidth = () => {\n        return parseInt(this.props.width * (this.props.percent / 100), 10);\n    };\n\n    render() {\n        const {percent, width, height} = this.props;\n        return (\n            <div style={{border: 'solid 1px lightgray', width: width}}>\n                <div style={{\n                    width: this.getWidthAsPercentOfTotalWidth(),\n                    height,\n                    backgroundColor: this.getColor(percent)\n                }} />\n            </div>\n        );\n    }\n}\n\nProgressBar.propTypes = {\n    /** Percent of progress completed */\n    percent: PropTypes.number.isRequired,\n\n    /** Bar width */\n    width: PropTypes.number.isRequired,\n\n    /** Bar height */\n    height: PropTypes.number\n};\n\nProgressBar.defaultProps = {\n    height: 5\n};\n\nexport default ProgressBar;\n","import React from 'react';\n\n/** SVG Eye Icon */\nfunction EyeIcon() {\n    // Attribution: Fabián Alexis at https://commons.wikimedia.org/wiki/File:Antu_view-preview.svg\n    return (\n        <svg width=\"16\" height=\"16\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 22 22\">\n            <g transform=\"matrix(.02146 0 0 .02146 1 1)\" fill=\"#4d4d4d\">\n                <path d=\"m466.07 161.53c-205.6 0-382.8 121.2-464.2 296.1-2.5 5.3-2.5 11.5 0 16.9 81.4 174.9 258.6 296.1 464.2 296.1 205.6 0 382.8-121.2 464.2-296.1 2.5-5.3 2.5-11.5 0-16.9-81.4-174.9-258.6-296.1-464.2-296.1m0 514.7c-116.1 0-210.1-94.1-210.1-210.1 0-116.1 94.1-210.1 210.1-210.1 116.1 0 210.1 94.1 210.1 210.1 0 116-94.1 210.1-210.1 210.1\" />\n                <circle cx=\"466.08\" cy=\"466.02\" r=\"134.5\" />\n            </g>\n        </svg>\n    )\n}\n\nexport default EyeIcon;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ProgressBar from '../ProgressBar';\nimport EyeIcon from '../EyeIcon';\nimport TextInput from '../TextInput';\n\n/** Password input with integrated label, quality tips, and show password toggle. */\nclass PasswordInput extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            showPassword: false\n        }\n    }\n\n    toggleShowPassword = event => {\n        this.setState(prevState => {\n            return { showPassword: !prevState.showPassword };\n        });\n        if (event) event.preventDefault();\n    }\n\n    render() {\n        const { htmlId, value, label, error, onChange, placeholder, maxLength, showVisibilityToggle, quality, ...props } = this.props;\n        const { showPassword } = this.state;\n\n        return (\n            <TextInput\n                htmlId={htmlId}\n                label={label}\n                placeholder={placeholder}\n                type={showPassword ? 'text' : 'password'}\n                onChange={onChange}\n                value={value}\n                maxLength={maxLength}\n                error={error}\n                required\n                {...props}>\n                {\n                    showVisibilityToggle &&\n                    <a\n                        href=\"#\"\n                        onClick={this.toggleShowPassword}\n                        style={{ marginLeft: 5 }}>\n                        <EyeIcon />\n                    </a>\n                }\n                {\n                    value.length > 0 && quality && <ProgressBar percent={quality} width={130} />\n                }\n            </TextInput>\n        );\n    }\n}\n\nPasswordInput.propTypes = {\n    /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n    htmlId: PropTypes.string.isRequired,\n\n    /** Input name. Recommend setting this to match object's property so a single change handler can be used by convention.*/\n    name: PropTypes.string.isRequired,\n\n    /** Password value */\n    value: PropTypes.any,\n\n    /** Input label */\n    label: PropTypes.string,\n\n    /** Function called when password input value changes */\n    onChange: PropTypes.func.isRequired,\n\n    /** Max password length accepted */\n    maxLength: PropTypes.number,\n\n    /** Placeholder displayed when no password is entered */\n    placeholder: PropTypes.string,\n\n    /** Set to true to show the toggle for displaying the currently entered password */\n    showVisibilityToggle: PropTypes.bool,\n\n    /** Display password quality visually via ProgressBar, accepts a number between 0 and 100 */\n    quality: PropTypes.number,\n\n    /** Validation error to display */\n    error: PropTypes.string\n};\n\nPasswordInput.defaultProps = {\n    maxLength: 50,\n    showVisibilityToggle: false,\n    label: 'Password'\n};\n\nexport default PasswordInput;\n","export { default } from './PasswordInput';\n","module.exports = [{\n  \"name\": \"EyeIcon\",\n  \"description\": \"SVG Eye Icon\",\n  \"code\": \"import React from 'react';\\n\\n/** SVG Eye Icon */\\nfunction EyeIcon() {\\n    // Attribution: Fabián Alexis at https://commons.wikimedia.org/wiki/File:Antu_view-preview.svg\\n    return (\\n        <svg width=\\\"16\\\" height=\\\"16\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 22 22\\\">\\n            <g transform=\\\"matrix(.02146 0 0 .02146 1 1)\\\" fill=\\\"#4d4d4d\\\">\\n                <path d=\\\"m466.07 161.53c-205.6 0-382.8 121.2-464.2 296.1-2.5 5.3-2.5 11.5 0 16.9 81.4 174.9 258.6 296.1 464.2 296.1 205.6 0 382.8-121.2 464.2-296.1 2.5-5.3 2.5-11.5 0-16.9-81.4-174.9-258.6-296.1-464.2-296.1m0 514.7c-116.1 0-210.1-94.1-210.1-210.1 0-116.1 94.1-210.1 210.1-210.1 116.1 0 210.1 94.1 210.1 210.1 0 116-94.1 210.1-210.1 210.1\\\" />\\n                <circle cx=\\\"466.08\\\" cy=\\\"466.02\\\" r=\\\"134.5\\\" />\\n            </g>\\n        </svg>\\n    )\\n}\\n\\nexport default EyeIcon;\\n\",\n  \"examples\": []\n}, {\n  \"name\": \"Label\",\n  \"description\": \"Label with required field display, htmlFor, and block styling\",\n  \"props\": {\n    \"htmlFor\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"HTML ID for associated input\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Label text\"\n    },\n    \"required\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Display asterisk after label if true\"\n    }\n  },\n  \"code\": \"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\n/** Label with required field display, htmlFor, and block styling */\\nfunction Label({htmlFor, label, required}) {\\n    return (\\n        <label style={{display: 'block'}} htmlFor={htmlFor}>\\n            {label} { required && <span style={{color: 'red'}}> *</span> }\\n        </label>\\n    )\\n}\\n\\nLabel.propTypes = {\\n    /** HTML ID for associated input */\\n    htmlFor: PropTypes.string.isRequired,\\n\\n    /** Label text */\\n    label: PropTypes.string.isRequired,\\n\\n    /** Display asterisk after label if true */\\n    required: PropTypes.bool\\n};\\n\\nexport default Label;\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleOptional\",\n    \"description\": \"Optional label\",\n    \"code\": \"import React from 'react';\\nimport Label from 'components/Label';\\n\\n/** Optional label */\\nexport default function ExampleOptional() {\\n    return <Label htmlFor=\\\"test\\\" label=\\\"test\\\" />\\n}\\n\"\n  }, {\n    \"name\": \"ExampleRequired\",\n    \"description\": \"Required label\",\n    \"code\": \"import React from 'react';\\nimport Label from 'components/Label';\\n\\n/** Required label */\\nexport default function ExampleRequired() {\\n    return <Label htmlFor=\\\"test\\\" label=\\\"test\\\" required />\\n}\\n\"\n  }]\n}, {\n  \"name\": \"PasswordInput\",\n  \"description\": \"Password input with integrated label, quality tips, and show password toggle.\",\n  \"props\": {\n    \"htmlId\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"\n    },\n    \"name\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input name. Recommend setting this to match object's property so a single change handler can be used by convention.\"\n    },\n    \"value\": {\n      \"type\": {\n        \"name\": \"any\"\n      },\n      \"required\": false,\n      \"description\": \"Password value\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Input label\",\n      \"defaultValue\": {\n        \"value\": \"'Password'\",\n        \"computed\": false\n      }\n    },\n    \"onChange\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"Function called when password input value changes\"\n    },\n    \"maxLength\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": false,\n      \"description\": \"Max password length accepted\",\n      \"defaultValue\": {\n        \"value\": \"50\",\n        \"computed\": false\n      }\n    },\n    \"placeholder\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Placeholder displayed when no password is entered\"\n    },\n    \"showVisibilityToggle\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Set to true to show the toggle for displaying the currently entered password\",\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      }\n    },\n    \"quality\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": false,\n      \"description\": \"Display password quality visually via ProgressBar, accepts a number between 0 and 100\"\n    },\n    \"error\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Validation error to display\"\n    }\n  },\n  \"code\": \"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport ProgressBar from '../ProgressBar';\\nimport EyeIcon from '../EyeIcon';\\nimport TextInput from '../TextInput';\\n\\n/** Password input with integrated label, quality tips, and show password toggle. */\\nclass PasswordInput extends React.Component {\\n    constructor(props) {\\n        super(props);\\n        this.state = {\\n            showPassword: false\\n        }\\n    }\\n\\n    toggleShowPassword = event => {\\n        this.setState(prevState => {\\n            return { showPassword: !prevState.showPassword };\\n        });\\n        if (event) event.preventDefault();\\n    }\\n\\n    render() {\\n        const { htmlId, value, label, error, onChange, placeholder, maxLength, showVisibilityToggle, quality, ...props } = this.props;\\n        const { showPassword } = this.state;\\n\\n        return (\\n            <TextInput\\n                htmlId={htmlId}\\n                label={label}\\n                placeholder={placeholder}\\n                type={showPassword ? 'text' : 'password'}\\n                onChange={onChange}\\n                value={value}\\n                maxLength={maxLength}\\n                error={error}\\n                required\\n                {...props}>\\n                {\\n                    showVisibilityToggle &&\\n                    <a\\n                        href=\\\"#\\\"\\n                        onClick={this.toggleShowPassword}\\n                        style={{ marginLeft: 5 }}>\\n                        <EyeIcon />\\n                    </a>\\n                }\\n                {\\n                    value.length > 0 && quality && <ProgressBar percent={quality} width={130} />\\n                }\\n            </TextInput>\\n        );\\n    }\\n}\\n\\nPasswordInput.propTypes = {\\n    /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\n    htmlId: PropTypes.string.isRequired,\\n\\n    /** Input name. Recommend setting this to match object's property so a single change handler can be used by convention.*/\\n    name: PropTypes.string.isRequired,\\n\\n    /** Password value */\\n    value: PropTypes.any,\\n\\n    /** Input label */\\n    label: PropTypes.string,\\n\\n    /** Function called when password input value changes */\\n    onChange: PropTypes.func.isRequired,\\n\\n    /** Max password length accepted */\\n    maxLength: PropTypes.number,\\n\\n    /** Placeholder displayed when no password is entered */\\n    placeholder: PropTypes.string,\\n\\n    /** Set to true to show the toggle for displaying the currently entered password */\\n    showVisibilityToggle: PropTypes.bool,\\n\\n    /** Display password quality visually via ProgressBar, accepts a number between 0 and 100 */\\n    quality: PropTypes.number,\\n\\n    /** Validation error to display */\\n    error: PropTypes.string\\n};\\n\\nPasswordInput.defaultProps = {\\n    maxLength: 50,\\n    showVisibilityToggle: false,\\n    label: 'Password'\\n};\\n\\nexport default PasswordInput;\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleAllFeatures\",\n    \"description\": \"All features enabled\",\n    \"code\": \"import React from 'react';\\nimport PasswordInput from 'components/PasswordInput';\\n\\n/** All features enabled */\\nclass ExampleAllFeatures extends React.Component {\\n    constructor(props) {\\n        super(props);\\n\\n        this.state = {\\n            password: ''\\n        };\\n    }\\n\\n    getQuality() {\\n        const length = this.state.password.length;\\n        return length > 10 ? 100 : length * 10;\\n    }\\n\\n    render() {\\n        return (\\n            <div>\\n                <PasswordInput\\n                    htmlId=\\\"password-input-example-all-features\\\"\\n                    name=\\\"password\\\"\\n                    onChange={ event => this.setState({ password: event.target.value })}\\n                    value={this.state.password}\\n                    minLength={8}\\n                    placeholder=\\\"Enter password\\\"\\n                    showVisibilityToggle\\n                    quality={this.getQuality()}\\n                    {...this.props} />\\n            </div>\\n        )\\n    }\\n}\\n\\nexport default ExampleAllFeatures;\\n\\n\"\n  }]\n}, {\n  \"name\": \"ProgressBar\",\n  \"description\": \"\",\n  \"props\": {\n    \"percent\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": true,\n      \"description\": \"Percent of progress completed\"\n    },\n    \"width\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": true,\n      \"description\": \"Bar width\"\n    },\n    \"height\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": false,\n      \"description\": \"Bar height\",\n      \"defaultValue\": {\n        \"value\": \"5\",\n        \"computed\": false\n      }\n    }\n  },\n  \"code\": \"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nclass ProgressBar extends React.Component {\\n    getColor = (percent) => {\\n        if (this.props.percent === 100) return 'green';\\n        return this.props.percent > 50 ? 'lightgreen' : 'red';\\n    };\\n\\n    getWidthAsPercentOfTotalWidth = () => {\\n        return parseInt(this.props.width * (this.props.percent / 100), 10);\\n    };\\n\\n    render() {\\n        const {percent, width, height} = this.props;\\n        return (\\n            <div style={{border: 'solid 1px lightgray', width: width}}>\\n                <div style={{\\n                    width: this.getWidthAsPercentOfTotalWidth(),\\n                    height,\\n                    backgroundColor: this.getColor(percent)\\n                }} />\\n            </div>\\n        );\\n    }\\n}\\n\\nProgressBar.propTypes = {\\n    /** Percent of progress completed */\\n    percent: PropTypes.number.isRequired,\\n\\n    /** Bar width */\\n    width: PropTypes.number.isRequired,\\n\\n    /** Bar height */\\n    height: PropTypes.number\\n};\\n\\nProgressBar.defaultProps = {\\n    height: 5\\n};\\n\\nexport default ProgressBar;\\n\",\n  \"examples\": []\n}, {\n  \"name\": \"RegistrationForm\",\n  \"description\": \"Registration form with built-in validation.\",\n  \"props\": {\n    \"confirmationMessage\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Message displayed upon successful submission\",\n      \"defaultValue\": {\n        \"value\": \"\\\"Thanks for registering!\\\"\",\n        \"computed\": false\n      }\n    },\n    \"onSubmit\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"Called when form is submitted\"\n    },\n    \"minPasswordLength\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": false,\n      \"description\": \"Minimum password length\",\n      \"defaultValue\": {\n        \"value\": \"8\",\n        \"computed\": false\n      }\n    }\n  },\n  \"code\": \"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport TextInput from '../TextInput';\\nimport PasswordInput from '../PasswordInput';\\n\\n/** Registration form with built-in validation. */\\nclass RegistrationForm extends React.Component {\\n    constructor(props) {\\n        super(props);\\n\\n        this.state = {\\n            user: {\\n                email: '',\\n                password: ''\\n            },\\n            errors: {},\\n            submitted: false,\\n        };\\n    }\\n\\n    onChange = (event) => {\\n        const user = this.state.user;\\n        user[event.target.name] = event.target.value;\\n        this.setState({user});\\n    }\\n\\n    // Returns a number from 0 to 100 that represents password quality.\\n    // For simplicity, just returning % of min length entered.\\n    // Could enhance with checks for number, special char, unique characters, etc.\\n    passwordQuality(password) {\\n        if (!password) return null;\\n        if (password.length >= this.props.minPasswordLength) return 100;\\n        const percentOfMinLength = parseInt(password.length/this.props.minPasswordLength * 100, 10);\\n        return percentOfMinLength;\\n    }\\n\\n    validate({email, password}) {\\n        const errors = {};\\n        const {minPasswordLength} = this.props;\\n\\n        if (!email) errors.email = 'Email required.';\\n        if (password.length < minPasswordLength) errors.password = `Password must be at least ${minPasswordLength} characters.`;\\n\\n        this.setState({errors});\\n        const formIsValid = Object.getOwnPropertyNames(errors).length === 0;\\n        return formIsValid;\\n    }\\n\\n    onSubmit = () => {\\n        const {user} = this.state;\\n        const formIsValid = this.validate(user);\\n        if (formIsValid) {\\n            this.props.onSubmit(user);\\n            this.setState({submitted: true});\\n        }\\n    }\\n\\n    render() {\\n        const {errors, submitted} = this.state;\\n        const {email, password} = this.state.user;\\n\\n        return (\\n            submitted ?\\n                <h2>{this.props.confirmationMessage}</h2> :\\n                <div>\\n                    <TextInput\\n                        htmlId=\\\"registration-form-email\\\"\\n                        name=\\\"email\\\"\\n                        onChange={this.onChange}\\n                        label=\\\"Email\\\"\\n                        value={email}\\n                        error={errors.email}\\n                        required />\\n\\n                    <PasswordInput\\n                        htmlId=\\\"registration-form-password\\\"\\n                        name=\\\"password\\\"\\n                        value={password}\\n                        onChange={this.onChange}\\n                        quality={this.passwordQuality(password)}\\n                        showVisibilityToggle\\n                        maxLength={50}\\n                        error={errors.password} />\\n\\n                    <input type=\\\"submit\\\" value=\\\"Register\\\" onClick={this.onSubmit} />\\n                </div>\\n        )\\n    }\\n}\\n\\nRegistrationForm.propTypes = {\\n    /** Message displayed upon successful submission */\\n    confirmationMessage: PropTypes.string,\\n\\n    /** Called when form is submitted */\\n    onSubmit: PropTypes.func.isRequired,\\n\\n    /** Minimum password length */\\n    minPasswordLength: PropTypes.number\\n}\\n\\nRegistrationForm.defaultProps = {\\n    confirmationMessage: \\\"Thanks for registering!\\\",\\n    minPasswordLength: 8\\n};\\n\\nexport default RegistrationForm;\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleRegistrationForm\",\n    \"description\": \"\",\n    \"code\": \"import React from 'react';\\nimport RegistrationForm from 'components/RegistrationForm';\\n\\nexport default class ExampleRegistrationForm extends React.Component {\\n    onSubmit = (user) => {\\n        console.log(user);\\n    }\\n\\n    render() {\\n        return <RegistrationForm onSubmit={this.onSubmit} />\\n    }\\n}\\n\"\n  }]\n}, {\n  \"name\": \"TextInput\",\n  \"description\": \"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.\",\n  \"props\": {\n    \"htmlId\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"\n    },\n    \"name\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input name. Recommend setting this to match object's property so a single change handler can be used.\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input label\"\n    },\n    \"type\": {\n      \"type\": {\n        \"name\": \"enum\",\n        \"value\": [{\n          \"value\": \"'text'\",\n          \"computed\": false\n        }, {\n          \"value\": \"'number'\",\n          \"computed\": false\n        }, {\n          \"value\": \"'password'\",\n          \"computed\": false\n        }]\n      },\n      \"required\": false,\n      \"description\": \"Input type\",\n      \"defaultValue\": {\n        \"value\": \"\\\"text\\\"\",\n        \"computed\": false\n      }\n    },\n    \"required\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Mark label with asterisk if set to true\",\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      }\n    },\n    \"onChange\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"Function to call onChange\"\n    },\n    \"placeholder\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Placeholder to display when empty\"\n    },\n    \"value\": {\n      \"type\": {\n        \"name\": \"any\"\n      },\n      \"required\": false,\n      \"description\": \"Value\"\n    },\n    \"error\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"String to display when error occurs\"\n    },\n    \"children\": {\n      \"type\": {\n        \"name\": \"node\"\n      },\n      \"required\": false,\n      \"description\": \"Child component to display next to the input\"\n    }\n  },\n  \"code\": \"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport Label from '../Label';\\n\\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\\nfunction TextInput({htmlId, name, label, type = \\\"text\\\", required = false, onChange, placeholder, value, error, children, ...props}) {\\n    return (\\n        <div style={{marginBottom: 16}}>\\n            <Label htmlFor={htmlId} label={label} required={required} />\\n            <input\\n                id={htmlId}\\n                type={type}\\n                name={name}\\n                placeholder={placeholder}\\n                value={value}\\n                onChange={onChange}\\n                style={error && {border: 'solid 1px red'}}\\n                {...props}/>\\n            {children}\\n            {error && <div className=\\\"error\\\" style={{color: 'red'}}>{error}</div>}\\n        </div>\\n    );\\n};\\n\\nTextInput.propTypes = {\\n    /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\n    htmlId: PropTypes.string.isRequired,\\n\\n    /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\\n    name: PropTypes.string.isRequired,\\n\\n    /** Input label */\\n    label: PropTypes.string.isRequired,\\n\\n    /** Input type */\\n    type: PropTypes.oneOf(['text', 'number', 'password']),\\n\\n    /** Mark label with asterisk if set to true */\\n    required: PropTypes.bool,\\n\\n    /** Function to call onChange */\\n    onChange: PropTypes.func.isRequired,\\n\\n    /** Placeholder to display when empty */\\n    placeholder: PropTypes.string,\\n\\n    /** Value */\\n    value: PropTypes.any,\\n\\n    /** String to display when error occurs */\\n    error: PropTypes.string,\\n\\n    /** Child component to display next to the input */\\n    children: PropTypes.node\\n};\\n\\nexport default TextInput;\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleError\",\n    \"description\": \"Required TextBox with error\",\n    \"code\": \"import React from 'react';\\nimport TextInput from 'components/TextInput';\\n\\n/** Required TextBox with error */\\nexport default class ExampleError extends React.Component {\\n    render() {\\n        return (\\n            <TextInput\\n                htmlId=\\\"example-optional\\\"\\n                label=\\\"First Name\\\"\\n                name=\\\"firstname\\\"\\n                onChange={() => {}}\\n                required\\n                error=\\\"First name is required.\\\"\\n            />\\n        )\\n    }\\n}\\n\"\n  }, {\n    \"name\": \"ExampleOptional\",\n    \"description\": \"Optional TextBox\",\n    \"code\": \"import React from 'react';\\nimport TextInput from 'components/TextInput';\\n\\n/** Optional TextBox */\\nexport default class ExampleOptional extends React.Component {\\n    render() {\\n        return (\\n            <TextInput\\n                htmlId=\\\"example-optional\\\"\\n                label=\\\"First Name\\\"\\n                name=\\\"firstname\\\"\\n                onChange={() => {}}\\n            />\\n        )\\n    }\\n}\\n\"\n  }]\n}, {\n  \"name\": \"helloWorld\",\n  \"description\": \"Super lame component\",\n  \"props\": {\n    \"message\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Message to display\",\n      \"defaultValue\": {\n        \"value\": \"'World'\",\n        \"computed\": false\n      }\n    }\n  },\n  \"code\": \"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\n/** Super lame component */\\nfunction HelloWorld({message}) {\\n    return <div> Hello {message}</div>\\n}\\n\\nHelloWorld.defaultProps = {\\n    message: 'World',\\n};\\n\\nHelloWorld.propTypes = {\\n    /** Message to display */\\n    message: PropTypes.string,\\n};\\n\\nexport default HelloWorld;\\n\",\n  \"examples\": [{\n    \"name\": \"EampleHelloWorld\",\n    \"description\": \"Custom message\",\n    \"code\": \"import React from 'react';\\nimport HelloWorld from 'components/helloWorld';\\n\\n/** Custom message */\\nexport default function ExampleHelloWorld() {\\n    return <HelloWorld message=\\\"Cipherhack viewers!\\\" />\\n}\\n\"\n  }]\n}];","import React from 'react';\nimport Label from 'components/Label';\n\n/** Optional label */\nexport default function ExampleOptional() {\n    return <Label htmlFor=\"test\" label=\"test\" />\n}\n","import React from 'react';\nimport Label from 'components/Label';\n\n/** Required label */\nexport default function ExampleRequired() {\n    return <Label htmlFor=\"test\" label=\"test\" required />\n}\n","import React from 'react';\nimport PasswordInput from 'components/PasswordInput';\n\n/** All features enabled */\nclass ExampleAllFeatures extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            password: ''\n        };\n    }\n\n    getQuality() {\n        const length = this.state.password.length;\n        return length > 10 ? 100 : length * 10;\n    }\n\n    render() {\n        return (\n            <div>\n                <PasswordInput\n                    htmlId=\"password-input-example-all-features\"\n                    name=\"password\"\n                    onChange={ event => this.setState({ password: event.target.value })}\n                    value={this.state.password}\n                    minLength={8}\n                    placeholder=\"Enter password\"\n                    showVisibilityToggle\n                    quality={this.getQuality()}\n                    {...this.props} />\n            </div>\n        )\n    }\n}\n\nexport default ExampleAllFeatures;\n\n","import React from 'react';\nimport TextInput from 'components/TextInput';\n\n/** Required TextBox with error */\nexport default class ExampleError extends React.Component {\n    render() {\n        return (\n            <TextInput\n                htmlId=\"example-optional\"\n                label=\"First Name\"\n                name=\"firstname\"\n                onChange={() => {}}\n                required\n                error=\"First name is required.\"\n            />\n        )\n    }\n}\n","import React from 'react';\nimport TextInput from 'components/TextInput';\n\n/** Optional TextBox */\nexport default class ExampleOptional extends React.Component {\n    render() {\n        return (\n            <TextInput\n                htmlId=\"example-optional\"\n                label=\"First Name\"\n                name=\"firstname\"\n                onChange={() => {}}\n            />\n        )\n    }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TextInput from '../TextInput';\nimport PasswordInput from '../PasswordInput';\n\n/** Registration form with built-in validation. */\nclass RegistrationForm extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            user: {\n                email: '',\n                password: ''\n            },\n            errors: {},\n            submitted: false,\n        };\n    }\n\n    onChange = (event) => {\n        const user = this.state.user;\n        user[event.target.name] = event.target.value;\n        this.setState({user});\n    }\n\n    // Returns a number from 0 to 100 that represents password quality.\n    // For simplicity, just returning % of min length entered.\n    // Could enhance with checks for number, special char, unique characters, etc.\n    passwordQuality(password) {\n        if (!password) return null;\n        if (password.length >= this.props.minPasswordLength) return 100;\n        const percentOfMinLength = parseInt(password.length/this.props.minPasswordLength * 100, 10);\n        return percentOfMinLength;\n    }\n\n    validate({email, password}) {\n        const errors = {};\n        const {minPasswordLength} = this.props;\n\n        if (!email) errors.email = 'Email required.';\n        if (password.length < minPasswordLength) errors.password = `Password must be at least ${minPasswordLength} characters.`;\n\n        this.setState({errors});\n        const formIsValid = Object.getOwnPropertyNames(errors).length === 0;\n        return formIsValid;\n    }\n\n    onSubmit = () => {\n        const {user} = this.state;\n        const formIsValid = this.validate(user);\n        if (formIsValid) {\n            this.props.onSubmit(user);\n            this.setState({submitted: true});\n        }\n    }\n\n    render() {\n        const {errors, submitted} = this.state;\n        const {email, password} = this.state.user;\n\n        return (\n            submitted ?\n                <h2>{this.props.confirmationMessage}</h2> :\n                <div>\n                    <TextInput\n                        htmlId=\"registration-form-email\"\n                        name=\"email\"\n                        onChange={this.onChange}\n                        label=\"Email\"\n                        value={email}\n                        error={errors.email}\n                        required />\n\n                    <PasswordInput\n                        htmlId=\"registration-form-password\"\n                        name=\"password\"\n                        value={password}\n                        onChange={this.onChange}\n                        quality={this.passwordQuality(password)}\n                        showVisibilityToggle\n                        maxLength={50}\n                        error={errors.password} />\n\n                    <input type=\"submit\" value=\"Register\" onClick={this.onSubmit} />\n                </div>\n        )\n    }\n}\n\nRegistrationForm.propTypes = {\n    /** Message displayed upon successful submission */\n    confirmationMessage: PropTypes.string,\n\n    /** Called when form is submitted */\n    onSubmit: PropTypes.func.isRequired,\n\n    /** Minimum password length */\n    minPasswordLength: PropTypes.number\n}\n\nRegistrationForm.defaultProps = {\n    confirmationMessage: \"Thanks for registering!\",\n    minPasswordLength: 8\n};\n\nexport default RegistrationForm;\n","import React from 'react';\nimport RegistrationForm from 'components/RegistrationForm';\n\nexport default class ExampleRegistrationForm extends React.Component {\n    onSubmit = (user) => {\n        console.log(user);\n    }\n\n    render() {\n        return <RegistrationForm onSubmit={this.onSubmit} />\n    }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n/** Super lame component */\nfunction HelloWorld({message}) {\n    return <div> Hello {message}</div>\n}\n\nHelloWorld.defaultProps = {\n    message: 'World',\n};\n\nHelloWorld.propTypes = {\n    /** Message to display */\n    message: PropTypes.string,\n};\n\nexport default HelloWorld;\n","import React from 'react';\nimport HelloWorld from 'components/helloWorld';\n\n/** Custom message */\nexport default function ExampleHelloWorld() {\n    return <HelloWorld message=\"Cipherhack viewers!\" />\n}\n","var map = {\n\t\"./Label/ExampleOptional\": 13,\n\t\"./Label/ExampleOptional.js\": 13,\n\t\"./Label/ExampleRequired\": 14,\n\t\"./Label/ExampleRequired.js\": 14,\n\t\"./PasswordInput/ExampleAllFeatures\": 15,\n\t\"./PasswordInput/ExampleAllFeatures.js\": 15,\n\t\"./RegistrationForm/ExampleRegistrationForm\": 18,\n\t\"./RegistrationForm/ExampleRegistrationForm.js\": 18,\n\t\"./TextInput/ExampleError\": 16,\n\t\"./TextInput/ExampleError.js\": 16,\n\t\"./TextInput/ExampleOptional\": 17,\n\t\"./TextInput/ExampleOptional.js\": 17,\n\t\"./helloWorld/EampleHelloWorld\": 19,\n\t\"./helloWorld/EampleHelloWorld.js\": 19\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 29;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Navigation = ({components}) => {\n    return (\n        <ul className=\"navigation\">\n            {\n                components.map( name => {\n                    return (\n                        <li key={name}>\n                            <a href={`#${name}`}>{name}</a>\n                        </li>\n                    )\n                })\n            }\n        </ul>\n    )\n}\n\nNavigation.propTypes = {\n    components: PropTypes.array.isRequired\n};\n\nexport default Navigation;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport hljs from 'highlight.js/lib/highlight'\nimport javascript from 'highlight.js/lib/languages/javascript'\n\n// This way is easy, but adds 170K gzipped to bundle since all langs are included.\n// import Highlight from 'react-highlight';\n\nclass CodeExample extends React.Component {\n  componentDidMount() {\n    hljs.registerLanguage('javascript', javascript);\n    hljs.highlightBlock(this.element);\n  }\n\n  render() {\n    return (\n      <pre ref={ref => { this.element = ref }}>\n        <code>\n          {this.props.children}\n        </code>\n      </pre>\n    )\n  }\n}\n\nCodeExample.propTypes = {\n  children: PropTypes.string.isRequired\n}\n\nexport default CodeExample;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport CodeExample from './CodeExample';\n\nclass Example extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { showCode: false };\n    }\n\n    toggleCode = event => {\n        event.preventDefault();\n        this.setState(prevState => {\n            return {showCode: !prevState.showCode};\n        });\n    }\n\n    render() {\n        const {showCode} = this.state;\n        const {code, description, name} = this.props.example;\n        // Must use CommonJS require to dynamically require because ES Modules must be statically analyzable.\n        const ExampleComponent = require(`./examples/${this.props.componentName}/${name}`).default;\n        return (\n            <div className=\"example\">\n                {description && <h4>{description}</h4> }\n\n                <ExampleComponent />\n\n                <p>\n                    <a href=\"#\" onClick={this.toggleCode}>\n                        {showCode ? \"Hide \" : \"Show\"} Code\n                    </a>\n                </p>\n\n                {showCode && <CodeExample>{code}</CodeExample>}\n            </div>\n        )\n    }\n}\n\nExample.propTypes = {\n    example: PropTypes.object.isRequired,\n    componentName: PropTypes.string.isRequired\n}\n\nexport default Example;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Props = ({props}) => {\n    return (\n        <table className=\"props\">\n            <thead>\n            <tr>\n                <th>Name</th>\n                <th>Description</th>\n                <th>Type</th>\n                <th>Default</th>\n                <th>Required</th>\n            </tr>\n            </thead>\n            <tbody>\n            {\n                Object.keys(props).map(key => {\n                    return (\n                        <tr key={key}>\n                            <td>{key}</td>\n                            <td>{props[key].description}</td>\n                            <td>{props[key].type.name}</td>\n                            <td>{props[key].defaultValue && props[key].defaultValue.value}</td>\n                            <td>{props[key].required && \"X\"}</td>\n                        </tr>\n                    );\n                })\n            }\n            </tbody>\n        </table>\n    )\n}\n\nProps.propTypes = {\n    props: PropTypes.object.isRequired\n};\n\nexport default Props;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Example from './Example';\nimport Props from './Props';\n\nconst ComponentPage = ({component}) => {\n    const {name, description, props, examples} = component;\n\n    return (\n        <div className=\"componentpage\">\n            <h2>{name}</h2>\n            <p>{description}</p>\n\n            <h3>Example{examples.length > 1 && \"s\"}</h3>\n            {\n                examples.length > 0 ?\n                    examples.map( example => <Example key={example.name} example={example} componentName={name} /> ) :\n                    \"No examples exist.\"\n            }\n\n            <h3>Props</h3>\n            {\n                props ?\n                    <Props props={props} /> :\n                    \"This component accepts no props.\"\n            }\n        </div>\n    )\n};\n\nComponentPage.propTypes = {\n    component: PropTypes.object.isRequired\n};\n\nexport default ComponentPage;\n","import React from 'react';\nimport Navigation from './Navigation';\nimport ComponentPage from './ComponentPage';\nimport componentData from '../../config/componentData';\n\nexport default class Docs extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            route: window.location.hash.substr(1)\n        };\n    }\n\n    componentDidMount() {\n        window.addEventListener('hashchange', () => {\n            this.setState({route: window.location.hash.substr(1)})\n        })\n    }\n\n    render() {\n        const {route} = this.state;\n        const component = route ? componentData.filter( component => component.name === route)[0] : componentData[0];\n\n        return (\n            <div>\n                <Navigation components={componentData.map(component => component.name)} />\n                <ComponentPage component={component} />\n            </div>\n        )\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Docs from './docs/Docs';\nimport * as serviceWorker from './serviceWorker';\nimport '../node_modules/highlight.js/styles/ocean.css';\n\nReactDOM.render(<Docs />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}